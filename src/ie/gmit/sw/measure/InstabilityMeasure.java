package ie.gmit.sw.measure;

import java.util.ArrayList;
import java.util.List;

import ie.gmit.sw.graph.JarGraph;
import ie.gmit.sw.graph.Node;

/**
 * InstabilityMeasure measures instability for each class that consist in the graph.
 * It takes each Node and calculates number of income types, outgoing edges and 
 * using formula I = Ce / Ce + Ca, calculates positional stability.
 * 
 * Then results are implementing in Instability object and than appends to the List<Instability>.
 * 
 * Later this list is used to display results for inspected JAR archive.
 * 
 * @author g00196984 - Andrej Lavrinovic
 *
 */
public class InstabilityMeasure implements Measurable{
	
	private JarGraph jg;
	private List<Instability> iList = new ArrayList<Instability>();

	// Constructor generated by Eclipse
	/**
	 * Parameterized constructor that initializes graph.
	 * @param jg Graph that is representing JAR archive of classes.
	 */
	public InstabilityMeasure(JarGraph jg) {
		this.jg = jg;
	}

	@Override
	/**
	 * Method mesure takes graph as List, runs throuhg each node and
	 * does calculation for each class to get Efferent coupling, Afferent coupling
	 * and instability.
	 * 
	 * All resultes stores in Instability object and appended to the list of instability objects.
	 * 
	 */
	public void measure() {
		if(jg != null){
			for(int i = 0; i < jg.nodesNumber(); i++){
				Node n = jg.getNode(i);
				Class c = n.getC();
				int ce = n.getDeps().size();
				int ca = n.getEdges().size();
				double ins = 0;
				if(ce != 0 || ca != 0){
					ins = (double)ce / ((double)ce + (double)ca);
				}
				Instability inst = new Instability(c, ce, ca, ins);
				
				this.iList.add(inst);
			}
		}
	}

	// Return list of classes with instability measurement
	/**
	 * 
	 * @return Returns List<Instability>
	 */
	public List<Instability> getiList() {
		return iList;
	}
}
