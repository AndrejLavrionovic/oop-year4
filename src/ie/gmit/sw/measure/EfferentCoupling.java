package ie.gmit.sw.measure;

import ie.gmit.sw.reflection.ClassLab;
import ie.gmit.sw.reflection.JarContent;

/**
 * 
 * @author g00196984 - Andrej Lavrinovic
 * 
 * Efferent Coupling is a number that are representing
 * all classes that depend upon for current class.
 * 
 * To get this number we need to check all fields,
 * constructors, methods for types that refer to
 * the classes that belong to the given jar package
 *
 */

public class EfferentCoupling implements Measurable{

	private JarContent deps;
	private Class cl;
	private JarContent cls;
	
	private ClassLab cLab = new ClassLab();
	
	// Constructor using fields -> generated by eclipse
	public EfferentCoupling(Class cl, JarContent cls) {
		this.cl = cl;
		this.cls = cls;
		measure();
	}
	
	/*
	 * (non-Javadoc)
	 * @see ie.gmit.sw.measure.Measurable#measure()
	 * 
	 * This method checks all dependencies for given class
	 */
	@Override
	public void measure(){
		
		this.deps = new JarContent();
		
		// 1) implemented interfaces
		JarContent ifaces = cLab.getInterfaces(this.cl);
		if(ifaces.numberOfClasses() > 0){
			for(int i = 0; i < ifaces.numberOfClasses(); i ++){
				this.deps.addClass(ifaces.getClass(i));
			}
		}
		
		// 2) extended superclass
		Class superclass = cLab.getSuperclass(this.cl, this.cls);
		if(superclass != null){
			this.deps.addClass(superclass);
		}
		
		// 3) Declared instancies
		JarContent instances = cLab.getInstances(this.cls, this.cl);
		addDeps(instances);
		
		// 4) Constructors -> params
		JarContent constParams = cLab.getConstructorParameters(this.cls, this.cl);
		addDeps(constParams);
		
		// 5) Methods -> params
		JarContent methodParams = cLab.getMethodParameters(this.cls, this.cl);
		addDeps(methodParams);
		
		// 6) Methods Return type
		JarContent returnType = cLab.getMethodReturnType(this.cls, this.cl);
		addDeps(returnType);
	}
	
	// helper method that is used by measure()
	private void addDeps(JarContent d){
		if(d.numberOfClasses() > 0){
			for(int i = 0; i < d.numberOfClasses(); i++){
				if(!cLab.typeFilter(this.deps, d.getClass(i))){
					this.deps.addClass(d.getClass(i));
				}
			}
		}
	}

	// returns collection of classes that are depend upon for current class
	public JarContent getDeps() {
		return deps;
	}

	/*
	 * (non-Javadoc)
	 * @see ie.gmit.sw.measure.Measurable#getResult()
	 * 
	 * This method returns Efferent coupling that is 
	 * size of collection of classes that are depend upon
	 * for current class
	 */
	@Override
	public double getResult() {
		return (double)deps.numberOfClasses();
	}
	
	// returns current class
	public Class getCeClass(){
		return this.cl;
	}
}
