package ie.gmit.sw.reflection;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarInputStream;

import ie.gmit.sw.graph.Edge;
import ie.gmit.sw.graph.Node;

public class JarClassesLab {
	
	private static JarClassesLab instance;
	
	private List<Node> listOfNodes;
	private Map<Class, Node> mapOfNodes;
	
	private JarClassesLab(String jarName){
		setNodes(jarName);
	}
	
	public static JarClassesLab getInstance(String jarName){
		if(instance == null)
			instance = new JarClassesLab(jarName);
		return instance;
	}
	
	/*
	 * Method setNodes used to populate list of nodes and map of nodes
	 * Bought List and Map of nodes used for organization of graph in
	 * GraphHandler class.
	 */
	public void setNodes(String jarName){
		
		listOfNodes = new LinkedList<Node>();
		mapOfNodes = new HashMap<Class, Node>();

		try{
			JarInputStream in = new JarInputStream(new FileInputStream(new File(jarName))); // get stream
			JarEntry next = in.getNextJarEntry(); // get jar instance
			
			while(next != null){ // run through
				
				if(next.getName().endsWith(".class")){ // search for classes
					
					// get class name
					String name = next.getName().replaceAll("/", "\\.");
					name = name.replaceAll(".class", "");
					if (!name.contains("$")) name.substring(0, name.length() - ".class".length());

					// inspect class
					Class queryClass;
					try {
						queryClass = Class.forName(name);
						Node n = new Node(queryClass);
						listOfNodes.add(n);
						mapOfNodes.put(queryClass, n);
					} catch (ClassNotFoundException e) {
						System.out.println("Couldn't find class '" + name + "'"); // if class is not found
						System.exit(1);
					} // reflection
				}
				next = in.getNextJarEntry();
			}
					
		}catch(IOException e){
			System.out.println(e.getMessage());
			System.exit(1);
		}
	}
	
	/*
	 * Methods below used to find and add all dependencies that
	 * pointing on current node
	 */
	// get all implemented interfaces
	public void findInterfaces(Node n){
		Class c = n.getC();
		
		Class ifaces[] = c.getInterfaces();
		if(ifaces.length > 0){
			for(Class item : ifaces){
				if(!nodeFilter(n, n.getDeps()) && mapOfNodes.containsKey(item)){
					n.getDeps().add(this.mapOfNodes.get(item));
					Edge e = new Edge(this.mapOfNodes.get(item), n);
					mapOfNodes.get(item).addEdge(e);
				}
			}
		}
	}
	
	public void findSuperclass(Node n){
		
	}
	
	// filter checks if current node exist in the list of nodes
	public boolean nodeFilter(Node n, List<Node> nodes){
		return nodes.contains(n) ? true : false;
	}

	/*
	 * Getters generated by Eclipse
	 */
	public List<Node> getListOfNodes() {
		return listOfNodes;
	}

	public Map<Class, Node> getMapOfNodes() {
		return mapOfNodes;
	}
}
