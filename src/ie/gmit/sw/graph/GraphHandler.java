package ie.gmit.sw.graph;

import ie.gmit.sw.reflection.JarClassesLab;

/**
 * 
 * GraphHandler is class that used to build digraph
 * that is represents classes from JAR archive and theirs dependencies.
 * 
 * @author g00196984 - Andrej Lavrinovic
 *
 */
public class GraphHandler {

	private JarGraph graph;
	private String jarName;
	
	/*
	 * Singleton pattern used to exploit JarClassesLab
	 * for creating the graph pattern
	 */
	private JarClassesLab cLab;
	
	
	//Constructors
	
	/**
	 * Default constructor
	 */
	public GraphHandler(){} // default
	
	
	/**
	 * Parameterized constructor that takes path to the JAR archive (that need to be
	 * inspected) as a parameter. Constructor initializes JarClassesLab using singlton
	 * pattern.
	 * JarClassesLab used to inspect classes for types that are dependent on by inspected class
	 * and define edges that pointing on this class and edges outgoing from current class.
	 * 
	 * @param jarName is path to the JAR archive that passing to the program as parameter
	 */
	public GraphHandler(String jarName){ // parameterized
		this.jarName = jarName;
		cLab = JarClassesLab.getInstance(this.jarName);
	}
	
	/**
	 * Method creates a graph representation of classes from inspected JAR archive.
	 * It uses JarClassesLab to define all dependencies.
	 */
	public void setGraph(){
		graph = new JarGraph(cLab.getListOfNodes());
		
		// create dependencies for each node in graph
		for(int i = 0; i < graph.nodesNumber(); i++){
			Node node = graph.getNode(i);
			
			// 1) set interfaces
			cLab.findInterfaces(node);
			// 2) find superclass
			cLab.findSuperclass(node);
			// 3) find Fields
			cLab.findFields(node);
			// 4) find Constructors params
			cLab.findConstrParams(node);
			// 5) find Method params
			cLab.findMethodsParams(node);
			// 6) find Methods return type
			cLab.findMethodsReturnType(node);
		}
	}

	// Getters/Setters generated by Eclipse
	/**
	 * 
	 * @return Returns JarGraph that is list of Nodes with its edges.
	 */
	public JarGraph getGraph() {
		return graph;
	}
}
