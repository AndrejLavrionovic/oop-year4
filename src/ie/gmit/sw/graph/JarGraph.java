package ie.gmit.sw.graph;

import java.util.LinkedList;
import java.util.List;

/**
 * 
 * JarGraph represents graph that is collection (List) of Nodes with its edges.
 * JarGraph contains deligated methods from List collection.
 * 
 * @author g00196984 - Andrej Lavrinovic
 *
 */
public class JarGraph {

	private List<Node> graph;
	
	// Constructors
	/**
	 * Default constructor that initializes List<Node> graph.
	 */
	public JarGraph(){
		this.graph = new LinkedList<Node>();
	}
	
	/**
	 * Parameterized constructor that initializes List<Node> graph.
	 * 
	 * @param nodes is a list of nodes.
	 */
	public JarGraph(List<Node> nodes){
		this.graph = nodes;
	}

	/*
	 * Delegated methods generated by Eclipse
	 */
	/**
	 * 
	 * Deligated from List<>
	 * 
	 * @param n - single Node
	 * @return Returns true if given Node exist in collection graph,
	 * or false in other cases.
	 */
	public boolean containsNode(Node n) {
		return graph.contains(n);
	}

	/**
	 * 
	 * Deligated from List<>
	 * 
	 * @param n - single Node
	 * @return Returns true if Node is successfuly added to the graph collection.
	 */
	public boolean addNode(Node n) {
		return graph.add(n);
	}

	
	/**
	 * 
	 * Deligated from List<>
	 * 
	 * @param index is a sequence number represented the order of Node in the List collection
	 * @return Returns Node that is represented by given index.
	 */
	public Node getNode(int index) {
		return graph.get(index);
	}

	/**
	 * 
	 * Deligated from List<>
	 * 
	 * @return Returns integer number represented the number of all Nodes in graph collection.
	 */
	public int nodesNumber() {
		return graph.size();
	}
}
